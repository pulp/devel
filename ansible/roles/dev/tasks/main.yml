- name: Disable selinux
  selinux: state=disabled
  when: pulp_selinux_enforcing

- name: Disable sshd strict modes
  lineinfile:
      backrefs: yes
      dest: /etc/ssh/sshd_config
      regexp: "^#StrictModes yes"
      line: "StrictModes no"
  notify: restart sshd

- name: Install python-virtualenvwrapper
  package: name=python-virtualenvwrapper state=latest
  when: pulp_venv is defined

- name: Install developer extra-requirements
  pip:
    requirements: "{{ pulp_devel_dir }}/pulp/{{ item }}"
    virtualenv: "{{ pulp_venv | default(omit) }}"
  with_items:
    - test_requirements.txt
    - dev_requirements.txt
    - docs/requirements.txt
  when: pulp_install_extras is defined and pulp_install_extras

- name: Install Pulp Platform packages
  # Platform packages and dependencies get into the pulp virtualenv.
  pip:
    name: "{{ pulp_devel_dir }}/pulp/{{ item }}"
    extra_args: "-e"
    virtualenv: "{{ pulp_venv | default(omit) }}"
  with_items:
    - platform
    - common

- name: Enable autoenv Directory Switching for pulp
  lineinfile:
    dest: "{{ pulp_venv }}/.project"
    line: "{{ pulp_devel_dir }}/pulp"
    create: true
    regexp: ".*"
  when: pulp_venv is defined

- name: Install Plugin packages into platform Python environment
  pip:
    name: "{{ pulp_devel_dir }}/{{ item }}"
    extra_args: "-e"
    virtualenv: "{{ pulp_venv | default(omit) }}"
  # If we stick with running setup.py develop for all plugins, we'd want to do it for all available
  # plugins. For now, it only works with pulp_file
  # with_items: "{{ pulp_available_plugins }}"
  when: "{{ [item] | issubset(pulp_available_plugins) }}"
  with_items:
      - pulp_file

- name: Install pulp-dev library (system-wide)
  command: pip3 install -e {{pulp_devel_dir}}/devel/pulp-dev
  when: "{{ ['devel'] | issubset(pulp_available_repositories) }}"

# TODO(asmacdo) does this work without a venv?
- name: Reset and Migrate Pulp DB
  command: "{{ pulp_devel_dir }}/pulp/platform/pulp/app/db-reset.sh {{ pulp_venv | default(omit) }}"
  # If the task to create the "pulp" db reported that it made a change, that means the pulp db
  # didn't exist before running and we're safe to populate it.
  # If the pulp db already existed, don't destroy it here by running db-reset.
  when: pulp_postgres_db is defined and pulp_postgres_db.changed
  notify: restart tasking services

- name: Install celerybeat and pulp_resource_manager systemd unit files
  # The template allows us to specify the platform python environment.
  template:
      src: "templates/{{ item }}.j2"
      dest: "/etc/systemd/system/{{ item }}.service"
  with_items:
    - pulp_celerybeat
    - pulp_resource_manager
  notify:
    - reload systemd units
    - restart tasking services

- name: Install pulp_workers
  # TODO(asmacdo) This isnt right
  # The template allows us to specify the platform python environment.
  template:
      src: "templates/pulp_worker@.j2"
      dest: "/etc/systemd/system/pulp_worker@{{ item }}.service"
  with_items:
    - 1
    - 2
  notify:
    - reload systemd units
    - restart tasking services

- name: Start celery services
  service:
      name: "{{ item }}"
      state: started
      enabled: true
  with_items:
      - pulp_worker@1
      - pulp_worker@2
      - pulp_celerybeat
      - pulp_resource_manager

- name: Add django supplemental bashrc
  copy:
    src: files/django.bashrc
    dest: "{{ unprivileged_homedir }}/.bashrc.d/django.bashrc"
  become: false

- name: Add virtualenv supplemental bashrc
  copy:
    src: files/venv.bashrc
    dest: "{{ unprivileged_homedir }}/.bashrc.d/venv.bashrc"
  # TODO(asmacdo) required arg pulp_include_bashrc
  when: pulp_venv is defined and pulp_include_bashrc
  become: false
